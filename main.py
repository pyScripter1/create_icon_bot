import requests  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import io  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
from PIL import Image  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
import asyncio
import random

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—é–¥–∞
API_TOKEN_BOT = "Your_token"

# –¢–µ–∫—Å—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
INTRODUCE_TEXT = """–ü—Ä–∏–≤–µ—Ç, —è MyAvatar - —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫.
–ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ —Å—Ç–∏–ª—å. –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏ –∂–µ–ª–∞–µ–º—É—é –∞–≤–∞—Ç–∞—Ä–∫—É! ü§ó"""
# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
PIC_NAME = "introduce_pic.PNG"
# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
TOTAL_PAGES = 5
BUTTONS_PER_PAGE = 6

styles = [
        "adventurer", "adventurer-neutral", "avataaars", "avataaars-neutral", "big-ears", "big-ears-neutral",
        "big-smile", "bottts", "bottts-neutral", "croodles", "croodles-neutral", "dylan", "fun-emoji", "glass",
        "icons", "identicon", "initials", "lorelei", "lorelei-neutral", "micah", "miniavs", "notionists",
        "notionists-neutral", "open-peeps", "personas", "pixel-art", "pixel-art-neutral", "rings", "shapes", "thumbs"
    ]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN_BOT)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard(page):
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
    inline_keyboard = []


    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * BUTTONS_PER_PAGE
    end_index = page * BUTTONS_PER_PAGE
    buttons = []
    for style in styles[start_index:end_index]:
        buttons.append(InlineKeyboardButton(text=f"{style}", callback_data=f"style_{style}"))

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É)
    for i in range(0, len(buttons), 2):
        inline_keyboard.append(buttons[i:i + 2])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–∞–ª–µ–µ"
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if page < TOTAL_PAGES:
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page + 1}"))

    if navigation_buttons:
        inline_keyboard.append(navigation_buttons)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_bot(message: types.Message):
    await message.answer(INTRODUCE_TEXT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=create_keyboard(1))
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery):
    print(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞", callback_query.data)
    data = callback_query.data

    if data.startswith("page_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ "–î–∞–ª–µ–µ"
        page = int(data.split('_')[-1])
        try:
            await callback_query.message.edit_text(
                text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ: üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}",
                reply_markup=create_keyboard(page)
            )
            await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.", show_alert=True)

    elif data.startswith("style_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        style = data.split('_')[-1]
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: {style}")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        user_seed = str(random.random())
        avatar = generate_dicebear_avatar(seed=user_seed, style=style)
        if avatar:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with io.BytesIO() as image_buffer:
                avatar.save(image_buffer, format="PNG")
                image_buffer.seek(0)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BytesIO –≤ BufferedInputFile
                input_file = BufferedInputFile(image_buffer.getvalue(), filename="avatar.png")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await bot.send_photo(
                    chat_id=callback_query.message.chat.id,
                    photo=input_file,
                    caption=f"–ê–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ: {style}"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∏–ª–µ–π
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                    reply_markup=create_keyboard(1)
                )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def generate_dicebear_avatar(seed, style="identicon", size=1000):
    url = f"https://api.dicebear.com/9.x/{style}/png?seed={seed}&size={size}"
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        image_data = io.BytesIO(response.content)
        image = Image.open(image_data)
        return image
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Dicebear API: {e}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
